from aiogram import Router
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from .interface import get_support_keyboard, get_stars_keyboard, get_post_commands, get_search_commands, get_profile_commands
from decouple import config
import asyncio

base_router = Router()


@base_router.message(Command("start"))
async def greeting_with_user(message: Message):
    text =("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 'Gymnasium'!\n\n"
            "–≠—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —à–∫–æ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤.\n"
            "–°–∫–æ—Ä–µ–µ –æ—Å–≤–∞–∏–≤–∞–π—Å—è –∏ —Å—Ç–∞–Ω—å –Ω–∞—Å—Ç–æ—è—â–µ–π –ª–µ–≥–µ–Ω–¥–æ–π —à–∫–æ–ª—ã!\n\n"
            "/help - –ø–æ–º–æ–∂–µ—Ç –≤ –æ—Å–≤–æ–µ–Ω–∏–∏"
           )

    await message.answer(text=text)

    special_user_id = int(config("SPECIAL_ID"))

    if message.from_user.id == special_user_id:
        await message.answer_sticker(sticker="CAACAgIAAxkBAAEOKcNn9BmjYCp6hmZJyG0xmnDQjoLaUgAC7RkAAk6H-Ei_b1reCn5mazYE")
        await asyncio.sleep(2)
        await message.answer_sticker(sticker="CAACAgIAAxkBAAEO2QhoF1jhqkGCR9iy1hkG46qyArOuwAACFQMAAuSkCAe7gnojkiZa8zYE")
        await asyncio.sleep(2)
        await message.answer_sticker(sticker="CAACAgIAAxkBAAEO2RZoF1nI31soK1SwQppJxaU9P0yFiwACHAADw1YDHgaZGGIHt0S3NgQ")



@base_router.message(Command("cancel"))
async def cancel_state(message: Message, state: FSMContext):
    await message.answer("–í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã.")
    await state.clear()


@base_router.message(Command("support"))
async def ask_support(message: Message):
    keyboard = get_support_keyboard()

    text = ("–î–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n –°–ø–∞—Å–∏–±–æ, –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å, –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∫ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.\n"
            "–ë—É–¥–µ–º —Ä–∞–¥—ã –ª—é–±–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ—Ç –í–∞—Å –ø–æ–º–æ—â–∏. –ï—Å–ª–∏ –í–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç, –∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–ª–µ–≥—á–∏—Ç—å –µ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:"
           )

    await message.answer(text=text, reply_markup=keyboard)


@base_router.callback_query(lambda cal: cal.data.startswith("support"))
async def send_support_agree(callback: CallbackQuery):
    type_support = callback.data.split(":")[1]

    if type_support == "stars":
        prices = [LabeledPrice(label="XTR", amount=100)]
        await callback.message.answer_invoice(
            title="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
            description="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ 100 –∑–≤—ë–∑–¥!",
            prices=prices,
            provider_token="",
            payload="channel_support",
            currency="XTR",
            reply_markup=get_stars_keyboard(),
        )

    else:
        credit_card = config("CREDIT_CARD")
        await callback.message.answer(f"–¢-–ë–∞–Ω–∫: {credit_card}")


@base_router.pre_checkout_query()
async def pre_check(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)


@base_router.message(lambda mes: mes.successful_payment is True)
async def say_thanks(message: Message):
    await message.answer(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!ü§óüôè‚ù§")


@base_router.message(Command("personal"))
async def profile_abilities(message: Message):
    keyboard = get_profile_commands()

    await message.answer(text="–õ–∏—á–Ω–æ–µ:", reply_markup=keyboard)


@base_router.message(Command("pupils"))
async def pupils_abilities(message: Message):
    keyboard = get_search_commands()

    await message.answer(text="–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏ –ø–æ–∏—Å–∫ —É—á–µ–Ω–∏–∫–æ–≤:", reply_markup=keyboard)


@base_router.message(Command("posts"))
async def pupils_abilities(message: Message):
    keyboard = get_post_commands()

    await message.answer(text="–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ—Å—Ç–∞–º–∏:", reply_markup=keyboard)



@base_router.message(Command("help"))
async def help_information(message: Message):
    text = ("–ï—â—ë —Ä–∞–∑ –ø—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø–∞–º—è—Ç–∫–∞ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç —Ç–µ–±–µ –æ–± –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n\n"
            "1. –ü—Ä–æ–π–¥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é(/authorization) –∏ —Å–æ–∑–¥–∞–π –ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å(/personal).\n\n"
            "2. /pupils - –ø–æ–∏—Å–∫ —É—á–µ–Ω–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º, –∞ —Ç–∞–∫–∂–µ –ª–µ–Ω—Ç–∞ –∏–∑ —É—á–µ–Ω–∏–∫–æ–≤ —à–∫–æ–ª—ã. \n\n"
            "3. /posts - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤, –æ–± —ç—Ç–æ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ:\n"
            "–í—Å—ë –∑–∞–≤—è–∑–∞–Ω–æ –Ω–∞ —à–∫–æ–ª—å–Ω–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç–µ Gymcoinsüíé, —Å—É—Ç—å –≤–æ—Ç –≤ —á—ë–º:\n"
            "–í—ã —Ç–∞–ø–∞–µ—Ç–µ üíé -> —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤.\n"
            "–ó–∞ –ª–∞–π–∫–∏ –∞–≤—Ç–æ—Ä –ø–æc—Ç–∞ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É üí°, –±–∞–ª–∞–Ω—Å –∫–æ—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ '–ö–æ—à–µ–ª—å–∫–µ –∞–≤—Ç–æ—Ä–∞'.\n"
            "–ï—ë –æ–Ω –º–æ–∂–µ—Ç –ª–∏–±–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ üíé, –ª–∏–±–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü –ø–æ—Å—Ç–æ–≤(–≥—Å/–∫—Ä—É–∂–æ—á–∫–∏/–≤–∏–¥–µ–æ) –∏–ª–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É –æ–ø—Ü–∏–π.\n")

    await message.answer(text=text)


@base_router.message(Command("about"))
async def about_me(message: Message):
    channel_url = config("MY_CHANNEL")
    text = (f"–ï—Å–ª–∏ –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: {channel_url}\n"
            f"–í –Ω—ë–º —Ç—ã –Ω–∞–π–¥—ë—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö, –∞ —Ç–∞–∫–∂–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–∏.\n"
            f"–¢—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ –∏–¥–µ–∏ –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.\n"
            f"–°–¥–µ–ª–∞–µ–º –≤–º–µ—Å—Ç–µ –õ–£–ß–®–£–Æ —à–∫–æ–ª—å–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É!")

    await message.answer(text=text)





