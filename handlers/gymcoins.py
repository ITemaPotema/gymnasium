from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo,
)
from decouple import config
from .api.gymcoins_api import GymcoinsApi
from .interface import get_funds_keyboard
from .settings import CheckAuthFilter

gymcoins_router = Router()


@gymcoins_router.callback_query(lambda cal: cal.data == "commands:wallet", CheckAuthFilter())
async def welcome_funds(callback: CallbackQuery):
    keyboard = get_funds_keyboard()
    await callback.message.answer(text="–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –í–∞—à–∏–º–∏ gymcoins!", reply_markup=keyboard)


@gymcoins_router.callback_query(lambda cal: cal.data == "balance", CheckAuthFilter())
async def get_my_balance(callback: CallbackQuery, token: str):
    user_id = callback.from_user.id

    gymcoins_api = GymcoinsApi(user_id, token)

    balance = await gymcoins_api.get_balance()

    if balance is False:
        await callback.message.answer("–ù–µ –º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞(")
        return

    await callback.message.answer(f"–ë–∞–ª–∞–Ω—Å: {balance} üíé")

class WithdrawalStates(StatesGroup):
    withdraw = State()

@gymcoins_router.callback_query(lambda cal: cal.data == "author_wallet")
async def get_author_wallet(callback: CallbackQuery):
    user_id = callback.from_user.id
    gymcoins_api = GymcoinsApi(user_id)

    profit = await gymcoins_api.get_profit()

    if profit == 0:
        await callback.message.answer(text="–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: 0üí°")
        return

    button = [[InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ üí°->üíé", callback_data="–≤—ã–≤–µ—Å—Ç–∏")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=button)

    await callback.message.answer(text=f"–î–æc—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {profit}üí°", reply_markup=keyboard)



@gymcoins_router.callback_query(lambda cal: cal.data.startswith("–≤—ã–≤–µ—Å—Ç–∏"))
async def get_sum_withdraw(callback: CallbackQuery, state: FSMContext):
    button = [[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–≤–æ–¥", callback_data="cancel_withdraw")]]
    kb = InlineKeyboardMarkup(inline_keyboard=button)

    await callback.message.answer(text="‚ùó –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –¢–û–õ–¨–ö–û –∑–∞ üí°, –∞ –Ω–µ üíé!"
                                       " –¢–∞–∫ —á—Ç–æ –±—É–¥—å—Ç–µ –¥–æ –∫–æ–Ω—Ü–∞ —É–≤–µ—Ä–µ–Ω—ã –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –≤—ã–≤–æ–¥–∏—Ç—å üí° –Ω–∞ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å.", reply_markup=kb)
    await callback.message.answer(text="–í–≤–µ–¥–∏ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –≤—ã–≤–µ—Å—Ç–∏:")
    await state.set_state(WithdrawalStates.withdraw)


@gymcoins_router.callback_query(lambda cal: cal.data == "cancel_withdraw")
async def cancel_withdraw(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(text="–û—Ç–º–µ–Ω—è—é –ø—Ä–æ—Ü–µ—Å—Å.")
    await state.clear()

@gymcoins_router.message(StateFilter(WithdrawalStates.withdraw), CheckAuthFilter())
async def withdraw_profit(message: Message, state: FSMContext, token: str):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")
        return

    amount = int(message.text)

    user_id = message.from_user.id
    gymcoins_api = GymcoinsApi(user_id, token)

    result = await gymcoins_api.withdraw_funds(amount, "profit")

    if result:
        await message.answer("–£—Å–ø–µ—à–Ω–æ!")

    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∫ –≤—ã–≤–æ–¥—É!")

    await state.clear()

@gymcoins_router.callback_query(lambda cal: cal.data == "explain")
async def explain_balances(callback: CallbackQuery):
    text = ("–†–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ —Ç–∞–∫: \n\n"
            "–í—ã —Ç–∞–ø–∞–µ—Ç–µ Gymcoinsüíé, –æ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å(–ë–∞–ª–∞–Ω—Å)."
            "–°—Ä–µ–¥—Å—Ç–≤–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Ä–∞—Å—Ö–æ–¥—É—é—Ç—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤. \n\n"
            "–°—Ä–µ–¥—Å—Ç–≤–∞ –≤ –∫–æ—à–µ–ª—å–∫–µ –∞–≤—Ç–æ—Ä–∞üí° - —ç—Ç–æ —Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–ª—è –í–∞—Å –í–∞—à–∏ –ø–æ—Å—Ç—ã(–ª–∞–π–∫–∏)."
            "–ò—Ö –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ø–æ–∫—É–ø–∫—É –æ–ø—Ü–∏–π, –∞ —Ç–∞–∫–∂–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Å –∏ –∫—Ä—É–∂–æ—á–∫–æ–≤."
            "–°—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ –∫–æ—à–µ–ª—å–∫–∞ –∞–≤—Ç–æ—Ä–∞ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å, –æ–¥–Ω–∞–∫–æ –Ω–∞–æ–±–æ—Ä–æ—Ç —Å–¥–µ–ª–∞—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.")

    await callback.message.answer(text=text)


@gymcoins_router.callback_query(lambda cal: cal.data == "commands:maining", CheckAuthFilter())
async def start_app(callback: CallbackQuery):
    text = ("–ù–∞—á–∏–Ω–∞–π—Ç–µ –º–∞–π–Ω–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –Ω–æ —É—á—Ç–∏—Ç–µ, —á—Ç–æ: \n"
            "‚ùó –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—á—ë—Ç—á–∏–∫ gymcoins –æ–±–Ω—É–ª—è–µ—Ç—Å—è, —Ç–∞–∫ —á—Ç–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –≤—ã–≤–æ–¥–∏—Ç—å –∏—Ö –Ω–∞ –±–∞–ª–∞–Ω—Å(save) –ø–æ—Å–ª–µ —Å–µ—Å—Å–∏–∏ –º–∞–π–Ω–∏–Ω–≥–∞. \n"
            "‚ùó –ú–∏–Ω —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –∑–∞ –†–ê–ó = 100 gymcoins, –º–∞–∫—Å = 10000")

    btn = [[InlineKeyboardButton(text="–º–∞–π–Ω–∏—Ç—åüíé", web_app=WebAppInfo(url=f'{config("APP_URL")}/gymcoins'))]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=btn)

    await callback.message.answer(text=text, reply_markup=keyboard)
