from aiogram import Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command, Filter
from .bot_config import bot
from .interface import get_cancel_kb, get_chat_kb
from .api.chat_api import ChatApi, SearchStatus
from .settings import CheckAuthFilter

chat_router = Router()

@chat_router.message(Command("chat"))
async def start_anonymous_chat(message: Message):
    user_id = message.from_user.id
    chat_api = ChatApi(user_id)
    online = await chat_api.get_online()

    kb = get_chat_kb(online=online)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!", reply_markup=kb)


@chat_router.callback_query(lambda cal: cal.data == "chat:search", CheckAuthFilter())
async def search_dialog_partner(callback: CallbackQuery):
    user_id = callback.from_user.id
    chat_api = ChatApi(user_id)
    result = await chat_api.search_user_to_chat()

    if result.status == SearchStatus.SUCCESS:
        partner_id = result.partner_id

        text = "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ."
        btn = [[KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å –±–µ—Å–µ–¥—Éüõë")]]
        kb = ReplyKeyboardMarkup(keyboard=btn, resize_keyboard=True)

        await callback.message.answer(text=text, reply_markup=kb)
        await bot.send_message(chat_id=partner_id, text=text, reply_markup=kb)

    if result.status == SearchStatus.ALREADY_EXIST:
        await callback.message.answer(text="–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ!")

    if result.status == SearchStatus.WAITING:
        kb = get_cancel_kb()

        await callback.message.answer(text="–ò—â—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞üîç...", reply_markup=kb)



@chat_router.callback_query(lambda cal: cal.data == "chat:cancel")
async def cancel_chat_waiting(callback: CallbackQuery):
    user_id = callback.from_user.id
    chat_api = ChatApi(user_id)

    await chat_api.cancel_waiting()
    await callback.message.answer(text="–í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")


class HasActiveChatFilter(Filter):
    async def __call__(self, message: Message):
        user_id = message.from_user.id
        chat_api = ChatApi(user_id)

        partner_id = await chat_api.get_partner_id()

        if not partner_id:
            return False

        return {"partner_id": partner_id, "chat_api": chat_api}


@chat_router.message(HasActiveChatFilter(), lambda mes: mes.text == "–ó–∞–∫–æ–Ω—á–∏—Ç—å –±–µ—Å–µ–¥—Éüõë")
async def finish_dialog(message: Message, partner_id: int, chat_api: ChatApi):
    await chat_api.stop_chat(partner_id)
    online = await chat_api.get_online()
    kb = get_chat_kb(online=online)

    await bot.send_message(chat_id=partner_id, text="–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–∏–∞–ª–æ–≥ —Å –í–∞–º–∏!üõë", reply_markup=ReplyKeyboardRemove())
    await bot.send_message(chat_id=partner_id, text="–ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?", reply_markup=kb)
    await message.answer(text="–ë–µ—Å–µ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=ReplyKeyboardRemove())
    await message.answer(text="–ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?", reply_markup=kb)


@chat_router.message(HasActiveChatFilter())
async def chatting(message: Message, partner_id: int):
    if not message.text:
        await message.answer(text="–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
        return

    await bot.send_message(chat_id=partner_id, text=message.text)
