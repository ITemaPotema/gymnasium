
from aiogram import Router
from aiogram.types import CallbackQuery
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
)
from .api.content_api import ContentApi
from .interface import get_options_keyboard
from decouple import config
from .settings import CheckAuthFilter


options_router = Router()


@options_router.callback_query(lambda cal: cal.data == "commands:options", CheckAuthFilter())
async def show_list_of_options(callback: CallbackQuery):
    keyboard = get_options_keyboard()
    await callback.message.answer("–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∑–∞ –º–æ–Ω–µ—Ç—ã –∞–≤—Ç–æ—Ä–∞:", reply_markup=keyboard)


@options_router.callback_query(lambda cal: cal.data.startswith("option"))
async def choose_option(callback: CallbackQuery):
    option = callback.data.split(":")[1]
    option_cost = config("CONTENT_COST")
    extra_post_cost = config("EXTRA_POST_COST")

    answers = {
        "extra_post": "–≠—Ç–∞ –æ–ø—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞ –æ–¥–∏–Ω –ø–æ—Å—Ç –≤ –¥–µ–Ω—å –±–æ–ª—å—à–µ. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –∫—É–ø–ª–µ–Ω–∞ –Ω–µ–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ, –Ω–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç –≤—ã—à–µ.",
        "stat": "–≠—Ç–∞ –æ–ø—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–µ—Ö, –∫—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ –í–∞—à–∏–º –ø–æ—Å—Ç–∞–º. –ë–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –í–∞–º —Ñ–∞–π–ª.\n"
                "–í–Ω–∏–º–∞–Ω–∏–µ‚ùó –§–∞–π–ª –º–æ–∂–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ telegram, –ø–æ—ç—Ç–æ–º—É –µ–≥–æ —Å–ª–µ–¥—É–µ—Ç —Å–∫–∞—á–∞—Ç—å –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –æ—Ç–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ '–ó–∞–≥—Ä—É–∑–∫–∏'"
    }

    button = [[InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data=f"buy:{option}")]]
    kb = InlineKeyboardMarkup(inline_keyboard=button)

    cost_text = f"–°—Ç–æ–∏–º–æ—Å—Ç—å = {extra_post_cost}üí° * n, n = –∫–æ–ª –≤–æ –¥–æ–ø –ø–æ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –í—ã —É–∂–µ –∫—É–ø–∏–ª–∏" if option == "extra_post" else f"–°—Ç–æ–∏–º–æ—Å—Ç—å = {option_cost}üí°"
    text = answers[option] + "\n\n" + cost_text

    await callback.message.answer(text=text, reply_markup=kb)


@options_router.callback_query(lambda cal: cal.data.startswith("buy"))
async def buy_option(callback: CallbackQuery):
    user_id = callback.from_user.id
    option = callback.data.split(":")[1]
    content_api = ContentApi(user_id)

    if option == "extra_post":
        result = await content_api.buy_extra_post()

    else:
        result = await content_api.buy_content(option)

    if result > 0:
        await callback.message.answer(text=f"–£—Å–ø–µ—à–Ω–æ! –°–ø–∏—Å–∞–Ω–æ {result}üí°")

    elif result is False:
        await callback.message.answer(text="–≠—Ç–∞ –æ–ø—Ü–∏—è —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!")

    else:
        await callback.message.answer(text=f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {-result}üí°")



